<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Clamee&#39;s Blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2020-12-07T14:05:20.571Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Clamee</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【游记】CSP 游记</title>
    <link href="http://example.com/2020/12/30/CSP-%E6%B8%B8%E8%AE%B0/"/>
    <id>http://example.com/2020/12/30/CSP-%E6%B8%B8%E8%AE%B0/</id>
    <published>2020-12-30T15:59:59.000Z</published>
    <updated>2020-12-07T14:05:20.571Z</updated>
    
    <content type="html"><![CDATA[<p>由于我的 blog 不会自动更新修改时间，为了防止引起恐慌，故 blog 更新时间不会显示原本的更新时间。</p><h4 id="Part-1-S1"><a href="#Part-1-S1" class="headerlink" title="Part 1. S1"></a>Part 1. S1</h4><h5 id="DAY-2-DAY-1"><a href="#DAY-2-DAY-1" class="headerlink" title="DAY -2~DAY -1"></a>DAY -2~DAY -1</h5><p>Ys 让我们考了三场试，全都考得贼差，心态崩了。</p><p>考试的时候笔用完了，考前就去文具店买了几只那种 $1$ 元钱的笔。</p><p>初赛前复习了一下补码反码什么的，然后其它的都没怎么看。</p><h5 id="DAY-1"><a href="#DAY-1" class="headerlink" title="DAY 1"></a>DAY 1</h5><p>上午 7:10 不到就跑到机房来了，等到 7:20 左右 ovor 来说是要到校门口集合。然后又来了几个人说不要。我也不是很懂。</p><p>8:10 去做车。有幸做 春日野悠 先生的旁边。路上问了他一个题，然后被他随手 cut 了。我又被打击到了。途中经过了 SDFZ，Imakf 拍了几张照，和去年一模一样呢。</p><p>到 湖南大学 以后有人找 Imakf，qiuly，踢个人 去签名。今年也见到了 老K ，只不过今年 zzt 比较走运没被 a 而已。</p><p>卷子感觉比去年简单。但我阅读理解第三题还是炸的差不多。最后就蒙了个期望得分。蒙对了香农是我没想到的。</p><p>考试的时候好多考场的钟坏了，这不是那个都市传说吗？相信聪明的你也是可以理解的吧。总之 +1s 就对了。</p><p>考完回来在车上和绿水青山谈笑风生了一波。</p><p>中午在 金拱门 吃的中饭。然后还被 T 神拉去打了会篮球。</p><h4 id="Part-2-S2"><a href="#Part-2-S2" class="headerlink" title="Part 2. S2"></a>Part 2. S2</h4><p>复赛就美妙的考崩了，我也不知道怎么回事。</p><h5 id="DAY-1-1"><a href="#DAY-1-1" class="headerlink" title="DAY 1"></a>DAY 1</h5><p>开考前做大巴车坐了好久，Imakf 又拍了张 FZ 的照。</p><p>开考后看到第一题就感觉出题人特别强，直接给整蒙了，好在这个题最后只打了 1h 多一点。考完发现有一个小点判错了，最后给官方数据扣了 10pts。</p><p>第二题 20min 打完就没管了，最后又出了神奇的错误，导致 100-&gt; 65。</p><p>然后觉得 T4 比 T3 简单开 T4。</p><p>然后我又神奇的把被吃序列和吃人序列搞反了，最后只有 20pts。</p><p>T3 最后打了纯暴力没取模拿了 10pts。好像这题线段树二有 70pts，不由对出题人由衷地钦佩。</p><p>晚上去咖啡之翼吃的晚饭，回去之后感觉整个人都不好了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;由于我的 blog 不会自动更新修改时间，为了防止引起恐慌，故 blog 更新时间不会显示原本的更新时间。&lt;/p&gt;
&lt;h4 id=&quot;Part-1-S1&quot;&gt;&lt;a href=&quot;#Part-1-S1&quot; class=&quot;headerlink&quot; title=&quot;Part 1. S1&quot;&gt;&lt;</summary>
      
    
    
    
    
    <category term="Other" scheme="http://example.com/tags/Other/"/>
    
  </entry>
  
  <entry>
    <title>字符串总结</title>
    <link href="http://example.com/2020/10/25/%E6%B5%85%E8%B0%88%E5%9B%9E%E6%96%87%E8%87%AA%E5%8A%A8%E6%9C%BA/"/>
    <id>http://example.com/2020/10/25/%E6%B5%85%E8%B0%88%E5%9B%9E%E6%96%87%E8%87%AA%E5%8A%A8%E6%9C%BA/</id>
    <published>2020-10-25T13:04:20.000Z</published>
    <updated>2020-10-29T12:58:31.070Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h4><p>Hash 是最简单同时也是泛用性最强的字符串算法。它的思想很简单：设计 Hash 函数 $f$，两个字符串的 hash 函数值一样时两个字符串一样，否则两个字符串不一样。在设计 Hash 函数时，我们主要关心的是时间复杂度和准确率。例如有一些提高准确率的方法：自然溢出、多模数 Hash……</p><p>在大多数情况下，形如 $f(x)=A+Bx+Cx^2\cdots$ 是一种简单高效的 Hash。下面的 Skip 也是基于这种 Hash 方法。</p><h5 id="Skip：快速得到子串-Hash-值"><a href="#Skip：快速得到子串-Hash-值" class="headerlink" title="Skip：快速得到子串 Hash 值"></a>Skip：快速得到子串 Hash 值</h5><blockquote><p>给定一个串 $s$，每次查询子串 $s[l:r]$ 的 Hash 值。</p></blockquote><p>设 $g(i)$ 表示 $s[1:i]$ 的 Hash 值。</p><p>考虑我们的 $hash$ 函数时实际上是一个多项式，那么有 $g(i)=x*g(i-1)+b$。</p><p>可以发现，对于前 $l-1$ 个元素，它们对 $g(r)$ 的贡献为 $x^{r-l+1}g(l-1)$。</p><p>将这个贡献减掉，就可以得到正确的 $Hash$ 值。</p><p>即 $f(s[l:r])=f([s[1:r]])-x^{r-l+1}f(s[1:l-1])$。</p><h4 id="KMP-求前缀函数"><a href="#KMP-求前缀函数" class="headerlink" title="KMP 求前缀函数"></a>KMP 求前缀函数</h4><p>给定一个长度为 $n$ 的字符串 $s$，其 <strong>前缀函数</strong> 被定义为一个长度为 $n$ 的数组 $\pi$ 。其中 $\pi[i]$ 的定义是：</p><p>$s[1:i]$ 的最长真 border 长度。</p><p>这里不妨先讲一下 border。</p><h5 id="border-和-border-的性质"><a href="#border-和-border-的性质" class="headerlink" title="border 和 border 的性质"></a>border 和 border 的性质</h5><blockquote><p>Hillary: Open the border.</p><p>Trump: Build a wall.</p><p>DAN: I AK IOI.</p></blockquote><p>border 是一个字符串相同前缀和后缀。</p><p>例如在字符串 <code>daniel_dandandan</code> 中，$\varnothing,dan,daniel$_$dandandan$ 都是该字符串的 border。</p><ul><li>border 的性质</li></ul><p>字符串  $S$ 的所有 border 可以被划分成不超过 $\log_2|S|$ 段，每一段的长度是等差数列。</p><p>证明：</p><ul><li><p>引理 $1$：若字符串 $S$ 存在一个长度为 $k$ 的 border，那么 $|S|-k$ 为字符串的一个周期。</p></li><li><p>引理 $2$：若 $p,q$ 为字符串的周期且 $p+q\le|S|-gcd(p,q) $，那么 $gcd(p,q)$ 也为字符串的一个周期。</p></li></ul><p>考虑 border 大于 $\frac{|S|}{2} $ 的情况，由引理一得 $q=|S|-k $ 为 $S$ 的最小周期，其中 $k$ 为 $S$ 的最长 border，由引理二得 $|S|-aq\geq  \frac{|S|}{2} $ 为 $S$ 的 $border$。</p><p>递归证明 border 小于 $\frac{|S|}{2} $ 即可。</p><p>回文 border 是一个回文的 border。</p><p>类似地，回文 border 也有如上性质，读者可以自行证明。</p><p>这里只给出结论：字符串  $S$ 的所有回文 border 可以被划分成不超过 $\log_2|S|$ 段，每一段的长度是等差数列。</p><p>这里继续讲前缀函数和 KMP。</p><p>KMP 是一个高效的求前缀函数的算法。</p><p>这个算法其实很简单。假设我们已经求出了前 $i$ 个位置的前缀函数。求第 $i+1$ 个位置的时候我们不停地跳前缀匹配就行了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">while(k&amp;&amp;s2[k+1]!&#x3D;s2[i+1])k&#x3D;nxt[k];</span><br><span class="line">nxt[i+1]&#x3D;(s2[i+1]&#x3D;&#x3D;s2[k+1])?(++k):0;</span><br></pre></td></tr></table></figure><p>代码就两行。</p><p>因为 while 每执行一次 $k$  至少减少 $1$，$k$ 最多增加 $n$ 所以复杂度是线性的。</p><h4 id="Manacher"><a href="#Manacher" class="headerlink" title="Manacher"></a>Manacher</h4><p>Manacher 算法可以求出以每个位置为回文中轴的回文半径。</p><p>用前面提到的 $ Hash$ 算法套二分可以在 $O(n\log_2n)$ 的时间复杂度求解。而 Manacher 算法可以做到 $O(n)$。</p><p>我们始终维护一个最靠右的最长回文串 $s[l:r]$，记它的中轴为 $mid$。对于以 $x$ 为回文中心的回文串，可以直接找到与它关于$mid$ 对称的位置的回文半径，此时要保证回文串不超过 $r$，因为 $r$ 的右边是未知的，所以要和 $r-x+1$ 取 min，并从回文半径开始更新。最后再更新 $s[l:r]$。</p><p>代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if(t&lt;&#x3D;r)ans[t]&#x3D;min(ans[2*mid-t],r-t+1);</span><br><span class="line">while(b[ans[t]+t]&#x3D;&#x3D;b[t-ans[t]])ans[t]++;</span><br><span class="line">if(t+ans[t]&gt;r)r&#x3D;t+ans[t]-1,mid&#x3D;t;</span><br></pre></td></tr></table></figure><p>复杂度分析:</p><p>当第一行执行完 <code>t+ans[t]-1&lt;r</code> 时。第二行 <code>ans[t]</code> 不会进行更新。</p><p>当 <code>t+ans[t]-1=r</code> 时，每执行一次 <code>while</code> r 都会加 1，因为 r 最大为 n。所以 <code>while</code> 最多执行 n 次。</p><p>故复杂度为 $O(n)$。</p><h4 id="Z-函数-扩展-KMP"><a href="#Z-函数-扩展-KMP" class="headerlink" title="Z 函数(扩展 KMP)"></a>Z 函数(扩展 KMP)</h4><p>一个字符串的 Z 函数是一个长度为 $n$ 的数组，其中 $z[i]=lcp(s[1:n],s[i:n])$。</p><p>求解 Z 函数的方法与 Manacher 类似。</p><p>维护一个最靠右的前缀 lcp $s[l:r]$。对于从 x 直接从 $z[x-l+1]$  开始匹配即可。</p><p>代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if(i&lt;&#x3D;r)</span><br><span class="line">z[i]&#x3D;min(z[i-l],r-i+1);</span><br><span class="line">while(i+z[i]&lt;n&amp;&amp;s[z[i]]&#x3D;&#x3D;s[i+z[i]])++z[i];</span><br><span class="line">if(i+z[i]-1&gt;r)</span><br><span class="line">l&#x3D;i,r&#x3D;i+z[i]-1;</span><br></pre></td></tr></table></figure><p>读者可以结合 manacher 部分自行分析。</p><h4 id="字符串匹配"><a href="#字符串匹配" class="headerlink" title="字符串匹配"></a>字符串匹配</h4><p>在 OI 学习中，最简单实用的字符串匹配方法是利用前缀函数或字符串 Hash 求匹配。另外也能用 z 函数做字符串匹配。</p><p>此外还有更高效的匹配算法，例如 Boyer-Moore 算法，当然博主也不会，博主肯定不会讲。</p><ul><li>Hash 方法</li></ul><p>对于文本串的每个匹配串长度的的子串求出 Hash 值，和匹配串比较即可。</p><ul><li>前缀函数方法</li></ul><p>利用前缀函数快速跳 border 匹配。</p><ul><li>z 函数方法</li></ul><p>用一个分隔符将匹配串和文本串连起来。求 $z$ 函数。通过 $z$ 函数的定义不难发现所有文本串位置 z 函数值为文本串长度的即为匹配位置</p><h4 id="Lyndon-分解"><a href="#Lyndon-分解" class="headerlink" title="Lyndon 分解"></a>Lyndon 分解</h4><p>一些定义：</p><p>Lyndon 串：字典序小于其所有后缀字典序的字符串。</p><p>Lyndon 分解：将一个字符串分解成若干依次字典序非严格递减的 Lyndon 串。</p><p>近似 Lyndon 串：一个字符串 $t=ww\cdots \overline w$，其中 $w$ 是一个 Lyndon 串。</p><p>可以用 Duval 算法来求 Lyndon 分解。(划记：它用到了贪心的思想，初赛可能会考。)</p><p>在算法流程中，我们将待分解字符串分成 $s1s2s3$ 相连的三个部分。其中 $s1$ 是一个 Lyndon 串，并且已经求出了它的 Lyndon 分解，$s2$ 是一个近似 Lyndon 串，$s3$ 是未处理的部分。</p><p>每次将 $s3$ 的首字符接到 $s2$ 后面，如果 $s2$ 不再是近似 Lyndon 串，就将 $s2$ 的一部分前缀接到 $s1$ 末尾。</p><p>代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">for(rg int i&#x3D;1,j,k;i&lt;&#x3D;n;)</span><br><span class="line">&#123;</span><br><span class="line">j&#x3D;i;k&#x3D;i+1;</span><br><span class="line">while(k&lt;&#x3D;n&amp;&amp;s[j]&lt;&#x3D;s[k])</span><br><span class="line">&#123;</span><br><span class="line">if(s[j]&lt;s[k])j&#x3D;i;</span><br><span class="line">else j++;</span><br><span class="line">k++;</span><br><span class="line">&#125;</span><br><span class="line">while(i&lt;&#x3D;j)</span><br><span class="line">&#123;</span><br><span class="line">ans^&#x3D;(i+k-j-1);</span><br><span class="line">i+&#x3D;k-j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以证明复杂度是 $O(n)$ 的。</p><h5 id="最小表示法"><a href="#最小表示法" class="headerlink" title="最小表示法"></a>最小表示法</h5><p>字符串 $s$ 的最小表示为与 $s$ 循环同构的所有字符串中字典序最小的字符串。</p><p>对于长度为 $n$ 的串 $s$，可以用 Lyndon 分解求出最小表示法。</p><p>对 $ss$ 进行 Lyndon 分解，找到垮过这两个串的 Lyndon 串的首字母，从它开始之后 $n$ 个数就是 $s$ 的最小表示法。</p><h4 id="Trie"><a href="#Trie" class="headerlink" title="Trie"></a>Trie</h4><p>字典树 Trie，是一种数据结构。</p><p>OI wiki 上的图：<br><img src="https://oi-wiki.org/string/images/trie1.png" alt=""></p><h4 id="AC-自动机-ACAM"><a href="#AC-自动机-ACAM" class="headerlink" title="AC 自动机(ACAM)"></a>AC 自动机(ACAM)</h4><p>多匹配串匹配：</p><blockquote><p>给定 $n$个模式串 $s_i$ 和一个文本串 $t$，求有多少个不同的模式串在文本串里出现过。</p></blockquote><p>可以先将这 $n$ 个模式串丢到 trie 上，现在问题变为我们要像构造前缀函数一样构造出函数 $fail$，表示所有字符串与当前节点所代表的字符串的最长 border 所在节点，用 $fail$ 来跑匹配。</p><p>可以使用广搜来进行这一过程：</p><p>如果我们当前考虑到了一个节点，那么它的 $fail$ 应该指向它的父亲的 $fail$ 连出相同字符边的节点。然后依次进行广搜即可。需要注意如果一个点没有相应字符的边，则将它连到它的 $fail$ 的相应字符边。</p><p>代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">void get_nxt()</span><br><span class="line">&#123;</span><br><span class="line">queue&lt;int&gt; q;</span><br><span class="line">for(int i&#x3D;0;i&lt;&#x3D;25;i++)</span><br><span class="line">if(e[0].a[i])e[e[0].a[i]].nxt&#x3D;0,q.push(e[0].a[i]);</span><br><span class="line">while(!q.empty())</span><br><span class="line">&#123;</span><br><span class="line">int now&#x3D;q.front();q.pop();</span><br><span class="line">for(int i&#x3D;0;i&lt;&#x3D;25;i++)</span><br><span class="line">&#123;</span><br><span class="line">if(e[now].a[i])</span><br><span class="line">&#123;</span><br><span class="line">e[e[now].a[i]].nxt&#x3D;e[e[now].nxt].a[i];</span><br><span class="line">q.push(e[now].a[i]);</span><br><span class="line">&#125;</span><br><span class="line">else e[now].a[i]&#x3D;e[e[now].nxt].a[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="回文自动机-PAM"><a href="#回文自动机-PAM" class="headerlink" title="回文自动机(PAM)"></a>回文自动机(PAM)</h4><p>AC 自动机也由转移边和 fail 指针构成。</p><p>在回文自动机上每走一条转移边表示在字符串两边同时加上一个字符。</p><p>回文自动机有两个根，一个根表示奇数回文串，一个根表示偶数回文串，分别命名奇根偶根，一开始偶根的 $fail$ 指针指向奇根。</p><p>构建方法：</p><p>考虑增量法构建。</p><p>每次从上一次插入到的点不停跳 $fa$ 满足条件的位置然后将新点连上去即可。简单易懂。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">int getfa(int p,int now)</span><br><span class="line">&#123;</span><br><span class="line">    while(s[now]!&#x3D;s[now-e[p].len-1])p&#x3D;e[p].fa;</span><br><span class="line">    return p;</span><br><span class="line">&#125;</span><br><span class="line">void add(int x,int now)</span><br><span class="line">&#123;</span><br><span class="line">    int p&#x3D;getfa(las,now);</span><br><span class="line">    if(!e[p].ch[x])</span><br><span class="line">    &#123;</span><br><span class="line">        e[++tot].len&#x3D;e[p].len+2;</span><br><span class="line">        int t&#x3D;getfa(e[p].fa,now);</span><br><span class="line">        e[tot].fa&#x3D;e[t].ch[x];</span><br><span class="line">        e[tot].num&#x3D;e[e[tot].fa].num+1;</span><br><span class="line">        e[p].ch[x]&#x3D;tot;</span><br><span class="line">    &#125;</span><br><span class="line">    las&#x3D;e[p].ch[x];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="序列自动机"><a href="#序列自动机" class="headerlink" title="序列自动机"></a>序列自动机</h4><p>在这个自动机上从源点到每一个节点都是一个原串子序列。</p><p>构建方法：</p><p>考虑暴力：每次遍历一遍这个自动机，将没有当前值的转移边的节点向新节点连一条边这样是 $O(n)-O(1)$。</p><p>用平衡树来优化这一过程可以 $O(\log_2n)-O(\log_2n)$。</p><h4 id="后缀数组"><a href="#后缀数组" class="headerlink" title="后缀数组"></a>后缀数组</h4><p>后缀数组 $sa$ 表示字符串每个排名的后缀的首字母位置，可以通过后缀排序求解。后缀排序可以用 DC3 或 SA-IS 做到 $O(n)$。或可以通过倍增算法 + 基数排序做到 $O(n\log_2n)$。一般在 OI 比赛中，我们主要采用后面的算法。</p><ul><li>用 $sa$ 求 $height$</li></ul><p>记 $height_i$ 表示排名为 $i-1$ 与排名为 $i$ 的 $lcp$ 长度。它可以通过 $sa$ 快速求出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">void geth()</span><br><span class="line">&#123;</span><br><span class="line">for(int i&#x3D;1;i&lt;&#x3D;n;i++)</span><br><span class="line">rk[sa[i]]&#x3D;i;</span><br><span class="line">int k&#x3D;0;</span><br><span class="line">for(int i&#x3D;1;i&lt;&#x3D;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">if(rk[i]&#x3D;&#x3D;1)continue;</span><br><span class="line">if(k)--k;</span><br><span class="line">int j&#x3D;sa[rk[i]-1];</span><br><span class="line">while(i+k&lt;&#x3D;n&amp;&amp;j+k&lt;&#x3D;n&amp;&amp;s[i+k]&#x3D;&#x3D;s[j+k])++k;</span><br><span class="line">h[rk[i]]&#x3D;k;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="后缀自动机"><a href="#后缀自动机" class="headerlink" title="后缀自动机"></a>后缀自动机</h4><p>考虑增量法构建。</p><p>每次分三种情况讨论。</p><p>因为这个比较难，看我的博客不一定能看懂，所以还是推荐去看专门讲这个的博客。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">void add(int x)</span><br><span class="line">&#123;</span><br><span class="line">int p&#x3D;las;int np&#x3D;las&#x3D;++tot;f[tot]&#x3D;1;</span><br><span class="line">e[np].len&#x3D;e[p].len+1;</span><br><span class="line">for(;p&amp;&amp;!e[p].ch[x];p&#x3D;e[p].fa)e[p].ch[x]&#x3D;np;</span><br><span class="line">if(!p)e[np].fa&#x3D;1;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">int q&#x3D;e[p].ch[x];</span><br><span class="line">if(e[q].len&#x3D;&#x3D;e[p].len+1)e[np].fa&#x3D;q;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">int nq&#x3D;++tot;</span><br><span class="line">e[nq]&#x3D;e[q];</span><br><span class="line">e[nq].len&#x3D;e[p].len+1;</span><br><span class="line">e[q].fa&#x3D;e[np].fa&#x3D;nq;</span><br><span class="line">for(;p&amp;&amp;e[p].ch[x]&#x3D;&#x3D;q;p&#x3D;e[p].fa)e[p].ch[x]&#x3D;nq;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;Hash&quot;&gt;&lt;a href=&quot;#Hash&quot; class=&quot;headerlink&quot; title=&quot;Hash&quot;&gt;&lt;/a&gt;Hash&lt;/h4&gt;&lt;p&gt;Hash 是最简单同时也是泛用性最强的字符串算法。它的思想很简单：设计 Hash 函数 $f$，两个字符串的 hash 函数</summary>
      
    
    
    
    
    <category term="字符串" scheme="http://example.com/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>【题解】[FJOI2016]神秘数</title>
    <link href="http://example.com/2020/10/17/%E3%80%90%E9%A2%98%E8%A7%A3%E3%80%91-FJOI2016-%E7%A5%9E%E7%A7%98%E6%95%B0/"/>
    <id>http://example.com/2020/10/17/%E3%80%90%E9%A2%98%E8%A7%A3%E3%80%91-FJOI2016-%E7%A5%9E%E7%A7%98%E6%95%B0/</id>
    <published>2020-10-17T00:18:31.000Z</published>
    <updated>2020-10-17T00:31:26.145Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>题目大意：一个可重复数字集合S的神秘数定义为最小的不能被S的子集的和表示的正整数。</p><p>给定一个序列 $a$，每次询问一个区间的神秘数。</p></blockquote><p>很久之前还讲过这个题，当时还要求带修。</p><p>考虑加入当前的神秘数为 $x$。当加入一个数 $y$ 且 $y\le x$ 时神秘数会变为 $x+y$。当 $y&gt;x$ 时对答案不造成贡献。</p><p>可以考虑值域倍增，对 $[1,1],[2,3],[4,7],\cdots,[2^k,2^k-1],\cdots$ 之间的元素分别维护前缀和和 rmq。</p><p>每次查询的时候依次查区间最小值是否小于当前神秘数即可。如果小于的话直接加上区间和去下一个区间，不然直接返回答案。</p><p>如果 $O(n)-O(1)$ 求 rmq 的话复杂度可以做到 $O(n\log\max(a[i]))$。</p><p>我的代码就直接用 st 表了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;bits&#x2F;stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">#define il inline</span><br><span class="line">#define rg register</span><br><span class="line">#define ll long long</span><br><span class="line">il int read()</span><br><span class="line">&#123;</span><br><span class="line">int re&#x3D;0,k&#x3D;1;char ch&#x3D;getchar();</span><br><span class="line">while(ch&gt;&#39;9&#39;||ch&lt;&#39;0&#39;)&#123;if(ch&#x3D;&#x3D;&#39;-&#39;)k&#x3D;-1;ch&#x3D;getchar();&#125;</span><br><span class="line">while(ch&lt;&#x3D;&#39;9&#39;&amp;&amp;ch&gt;&#x3D;&#39;0&#39;)&#123;re&#x3D;re*10+ch-48;ch&#x3D;getchar();&#125;</span><br><span class="line">return re*k;</span><br><span class="line">&#125;</span><br><span class="line">il void write(int x)</span><br><span class="line">&#123;</span><br><span class="line">if(x&lt;0)return putchar(&#39;-&#39;),write(-x),void();</span><br><span class="line">if(x&lt;&#x3D;9)return putchar(x+48),void();</span><br><span class="line">return write(x&#x2F;10),write(x%10),void();</span><br><span class="line">&#125;</span><br><span class="line">int LOG[100005],a[100005],n,m;</span><br><span class="line">struct st&#123;</span><br><span class="line">int st[100005][17];ll sum[100005];</span><br><span class="line">void init(int liml,int limr)</span><br><span class="line">&#123;</span><br><span class="line">sum[0]&#x3D;0;</span><br><span class="line">for(rg int i&#x3D;1;i&lt;&#x3D;n;i++)</span><br><span class="line">if(a[i]&gt;&#x3D;liml&amp;&amp;a[i]&lt;&#x3D;limr)st[i][0]&#x3D;a[i],sum[i]&#x3D;sum[i-1]+a[i];</span><br><span class="line">else st[i][0]&#x3D;0x3f3f3f3f,sum[i]&#x3D;sum[i-1];</span><br><span class="line">for(rg int j&#x3D;1;(1&lt;&lt;j)&lt;&#x3D;n;j++)</span><br><span class="line">for(rg int i&#x3D;1;i+(1&lt;&lt;j)&lt;&#x3D;n+1;i++)</span><br><span class="line">st[i][j]&#x3D;min(st[i][j-1],st[i+(1&lt;&lt;(j-1))][j-1]);</span><br><span class="line">&#125;</span><br><span class="line">ll query(int l,int r)</span><br><span class="line">&#123;</span><br><span class="line">int d&#x3D;LOG[r-l];</span><br><span class="line">return min(st[l][d],st[r-(1&lt;&lt;d)+1][d]);</span><br><span class="line">&#125;</span><br><span class="line">ll Sum(int l,int r)</span><br><span class="line">&#123;</span><br><span class="line">return sum[r]-sum[l-1];</span><br><span class="line">&#125;</span><br><span class="line">&#125;b[30];</span><br><span class="line">signed main()</span><br><span class="line">&#123;</span><br><span class="line">n&#x3D;read();</span><br><span class="line">for(rg int i&#x3D;1;i&lt;&#x3D;n;i++)</span><br><span class="line">a[i]&#x3D;read();</span><br><span class="line">m&#x3D;read();</span><br><span class="line">for(rg int i&#x3D;2;i&lt;&#x3D;n;i++)</span><br><span class="line">LOG[i]&#x3D;LOG[i&gt;&gt;1]+1;</span><br><span class="line">b[0].init(1,1);</span><br><span class="line">for(rg int i&#x3D;1,t&#x3D;2;i&lt;&#x3D;29;i++,t&lt;&lt;&#x3D;1ll)</span><br><span class="line">b[i].init(t,t+t-1);</span><br><span class="line">for(rg int i&#x3D;1,l,r;i&lt;&#x3D;m;i++)</span><br><span class="line">&#123;</span><br><span class="line">l&#x3D;read();r&#x3D;read();</span><br><span class="line">ll ans&#x3D;0;int t&#x3D;0;</span><br><span class="line">while(t&lt;&#x3D;29)</span><br><span class="line">&#123;</span><br><span class="line">if(ans+1ll&lt;min(b[t].query(l,r),(1ll&lt;&lt;(t+1))-1))</span><br><span class="line">break;</span><br><span class="line">ans+&#x3D;b[t].Sum(l,r);</span><br><span class="line">t++;</span><br><span class="line">&#125;</span><br><span class="line">write(ans+1ll);puts(&quot;&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;题目大意：一个可重复数字集合S的神秘数定义为最小的不能被S的子集的和表示的正整数。&lt;/p&gt;
&lt;p&gt;给定一个序列 $a$，每次询问一个区间的神秘数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;很久之前还讲过这个题，当时还要求带修。&lt;/p&gt;
&lt;p&gt;考虑</summary>
      
    
    
    
    
    <category term="倍增" scheme="http://example.com/tags/%E5%80%8D%E5%A2%9E/"/>
    
    <category term="线段树" scheme="http://example.com/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>二次剩余学习笔记</title>
    <link href="http://example.com/2020/10/11/%E5%A4%9A%E9%A1%B9%E5%BC%8F-DLC/"/>
    <id>http://example.com/2020/10/11/%E5%A4%9A%E9%A1%B9%E5%BC%8F-DLC/</id>
    <published>2020-10-11T13:04:02.000Z</published>
    <updated>2020-10-11T14:29:47.869Z</updated>
    
    <content type="html"><![CDATA[<p>精通多项式的大家一定见过以下一个问题(如果你实在要说不精通的话就去看 Imakf 的博客，看完就精通了)。</p><h6 id="1-多项式开根-加强版"><a href="#1-多项式开根-加强版" class="headerlink" title="1.多项式开根(加强版)"></a>1.多项式开根(加强版)</h6><blockquote><p>给定一个 $n-1$ 次多项式 $A(x)$ ，求一个在  $\bmod {x^n}$ 意义下的多项式 $B(x)$ ，使得 $B^2(x)\equiv A(x)\pmod {x^n}$ ，答案取常数项更小的的 $\sqrt{A(x)}$。</p><p>多项式的系数在 $\bmod 998244353$ 的意义下进行运算。</p><p><strong>不保证 $a_0=1$</strong>。</p></blockquote><p>先来一波多项式部分的推导：</p><p>不妨假设我们求出了 $H^2(x)\equiv A(x)$，现在要求 $G^2(x)\equiv A(x)$。 </p><script type="math/tex; mode=display">G(x)-H(x)\equiv 0(\bmod x^(\frac{n}{2})\\G^2(x)+H^2(x)-2G(x)H(x)\equiv 0(\bmod x^n)\\2G(x)H(x)\equiv G^2(x)+H^2(x)(\bmod x^n)\\G(x)\equiv \frac{F(x)+H^2(x)}{2H(x)}(\bmod x^n)</script><p> 然后就可以递归求解了。</p><p>那么现在递归到常数项的时候有一个问题：如何求 $x_0^2\equiv y(\bmod 998244353)$。</p><p>那么就要用到一个新知识：二次剩余。</p><p>这个玩意使用来求解方程：</p><script type="math/tex; mode=display">x^2\equiv n(\bmod p)</script><p>这里要求 $p$ 是奇质数，我们不妨在这里设 $p$ 的原根为 $g$。</p><ul><li>判定</li></ul><p>判断一个数 $x$ 是不是二次剩余。</p><p>这个东西叫欧拉准则。</p><p>结论：</p><p>$x^{\frac{p-1}{2}}\equiv 1(\bmod p)$ 与 $x$ 是二次剩余等价。</p><p>推论：</p><p>$x^{\frac{p-1}{2}}\equiv -1(\bmod p)$ 与 $x$ 是非二次剩余等价。</p><p>根据费马小定理有 $x^{\frac{p-1}{2}}\equiv 1(\bmod p)\Leftrightarrow x^{2\cdot\frac{p-1}{2}}\equiv 1(\bmod p)\Leftrightarrow g^{k\cdot\frac{p-1}{2}}\equiv1(\bmod p)$ 。</p><p>可得 $k$ 一定为偶数，那么 $g^{\frac{k}{2}}$ 是 $x$ 开根的结果，所以 $x$ 是二次剩余，</p><p>由于$x^{\frac{p-1}{2}}\equiv 1 or-1(\bmod p)$ 。</p><ul><li>求解</li></ul><p>判定完了以后可以开始求解了。</p><p>我们可以先找到一个 $a$ 使得 $a^2-n\equiv 0$ 且 $a^2-n$ 是非二次剩余。</p><p>至于怎么找，因为非二次剩余数量是 $n/2$ 级别的，所以可以随机。</p><p>现在找到一个 $b$ 使得 $b^2 \equiv a^2-n$。</p><p>因为实际上实数域上涨不到这样的 $b$ 所以可以到复数域上找，只不过为了计算方便我们定义 $i^2=a^2-n$。</p><p>那么可以通过计算得出 $(a+i)^{p+1}\equiv n$。</p><p>所以得到 $(a+1)^{\frac{p+1}{2}}$ 是一个解， $-(a+1)^{\frac{p+1}{2}}$ 是另一个解。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;精通多项式的大家一定见过以下一个问题(如果你实在要说不精通的话就去看 Imakf 的博客，看完就精通了)。&lt;/p&gt;
&lt;h6 id=&quot;1-多项式开根-加强版&quot;&gt;&lt;a href=&quot;#1-多项式开根-加强版&quot; class=&quot;headerlink&quot; title=&quot;1.多项式开根(加</summary>
      
    
    
    
    
    <category term="学习笔记" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>【题解】[HA2009]求回文串</title>
    <link href="http://example.com/2020/10/08/%E3%80%90%E9%A2%98%E8%A7%A3%E3%80%91-HA2009-%E6%B1%82%E5%9B%9E%E6%96%87%E4%B8%B2/"/>
    <id>http://example.com/2020/10/08/%E3%80%90%E9%A2%98%E8%A7%A3%E3%80%91-HA2009-%E6%B1%82%E5%9B%9E%E6%96%87%E4%B8%B2/</id>
    <published>2020-10-08T03:51:33.000Z</published>
    <updated>2020-10-15T02:14:30.127Z</updated>
    
    <content type="html"><![CDATA[<p>题目大意：</p><blockquote><p>给你一个长度为 $n$ 的字符串，每次可以交换相邻的两个字符，求最小的交换次数使得将字符串变成回文串($n\le 10^6$)。</p></blockquote><p>可以考虑终止状态和起始状态的联系，可以构建序列 b 表示依次给每个字符找到原序列中的对应字符的出现位置，答案即为 b 数组的逆序对数。</p><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">abbca</span><br><span class="line">abcba</span><br></pre></td></tr></table></figure><p>构建出来的序列为 <code>1 2 4 3 5</code>，所以答案为 $1$。</p><p>那么我们就将问题转化为求出一个序列使得它对应上去了以后逆序对数最小。</p><p>考虑任意两种字符之间的贡献不难发现，我们可以钦定所有字符的左边不动，只改变右边。于是我们可以构造出一个新的序列。然后求一波逆序对即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;bits&#x2F;stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">#define il inline</span><br><span class="line">#define rg register</span><br><span class="line">#define int long long</span><br><span class="line">char s[1000005];</span><br><span class="line">il int read()</span><br><span class="line">&#123;</span><br><span class="line">int re&#x3D;0,k&#x3D;1;char ch&#x3D;getchar();</span><br><span class="line">while(ch&gt;&#39;9&#39;||ch&lt;&#39;0&#39;)&#123;if(ch&#x3D;&#x3D;&#39;-&#39;)k&#x3D;-1;ch&#x3D;getchar();&#125;</span><br><span class="line">while(ch&lt;&#x3D;&#39;9&#39;&amp;&amp;ch&gt;&#x3D;&#39;0&#39;)&#123;re&#x3D;re*10+ch-48;ch&#x3D;getchar();&#125;</span><br><span class="line">return re*k;</span><br><span class="line">&#125;</span><br><span class="line">il void write(int x)</span><br><span class="line">&#123;</span><br><span class="line">if(x&lt;0)return putchar(&#39;-&#39;),write(-x),void();</span><br><span class="line">if(x&lt;10)return putchar(x+48),void();</span><br><span class="line">return write(x&#x2F;10),putchar(x%10+48),void();</span><br><span class="line">&#125;</span><br><span class="line">int n,t[26],p[1000005],r[26],b[1000005];</span><br><span class="line">int tree[1000005],cnt;</span><br><span class="line">bool vis[1000005];</span><br><span class="line">void add(int x)</span><br><span class="line">&#123;</span><br><span class="line">while(x&lt;&#x3D;n)</span><br><span class="line">&#123;</span><br><span class="line">tree[x]++;</span><br><span class="line">x+&#x3D;x&amp;-x;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">int sum(int x)</span><br><span class="line">&#123;</span><br><span class="line">int re&#x3D;0;</span><br><span class="line">while(x)</span><br><span class="line">&#123;</span><br><span class="line">re+&#x3D;tree[x];</span><br><span class="line">x-&#x3D;x&amp;-x;</span><br><span class="line">&#125;</span><br><span class="line">return re;</span><br><span class="line">&#125;</span><br><span class="line">int abs2(int x)</span><br><span class="line">&#123;</span><br><span class="line">return x&gt;0?x:-x;</span><br><span class="line">&#125;</span><br><span class="line">signed main()</span><br><span class="line">&#123;</span><br><span class="line">scanf(&quot;%s&quot;,s+1);</span><br><span class="line">n&#x3D;strlen(s+1);</span><br><span class="line">for(rg int i&#x3D;1;i&lt;&#x3D;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">int now&#x3D;s[i]-&#39;A&#39;;</span><br><span class="line">t[now]++;</span><br><span class="line">p[i]&#x3D;r[now];</span><br><span class="line">r[now]&#x3D;i;</span><br><span class="line">&#125;</span><br><span class="line">for(rg int i&#x3D;0;i&lt;26;i++)</span><br><span class="line">&#123;</span><br><span class="line">if(t[i]&amp;1)</span><br><span class="line">&#123;</span><br><span class="line">if(cnt)</span><br><span class="line">&#123;</span><br><span class="line">puts(&quot;-1&quot;);return 0;</span><br><span class="line">&#125;</span><br><span class="line">cnt&#x3D;i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if(cnt)</span><br><span class="line">&#123;</span><br><span class="line">int now&#x3D;r[cnt],las&#x3D;0;</span><br><span class="line">for(int i&#x3D;1;i&lt;&#x3D;t[cnt]&#x2F;2;i++)</span><br><span class="line">&#123;</span><br><span class="line">now&#x3D;p[now];</span><br><span class="line">&#125;</span><br><span class="line">if(las)</span><br><span class="line">p[las]&#x3D;p[now];</span><br><span class="line">b[n&#x2F;2+1]&#x3D;now;</span><br><span class="line">vis[now]&#x3D;1;</span><br><span class="line">&#125;</span><br><span class="line">int ans&#x3D;0,ss&#x3D;0;</span><br><span class="line">for(rg int i&#x3D;1;i&lt;&#x3D;n&#x2F;2+ss;i++)</span><br><span class="line">&#123;</span><br><span class="line">if(vis[i])&#123;ss++;continue;&#125;</span><br><span class="line">int now&#x3D;s[i]-&#39;A&#39;;</span><br><span class="line">vis[i]&#x3D;vis[r[now]]&#x3D;1;</span><br><span class="line">b[i-ss]&#x3D;i;b[n-i+ss+1]&#x3D;r[now];</span><br><span class="line">r[now]&#x3D;p[r[now]];</span><br><span class="line">&#125;</span><br><span class="line">for(int i&#x3D;n;i&gt;&#x3D;1;i--)</span><br><span class="line">&#123;</span><br><span class="line">ans+&#x3D;sum(b[i]);</span><br><span class="line">add(b[i]);</span><br><span class="line">&#125;</span><br><span class="line">write(ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;题目大意：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给你一个长度为 $n$ 的字符串，每次可以交换相邻的两个字符，求最小的交换次数使得将字符串变成回文串($n\le 10^6$)。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;可以考虑终止状态和起始状态的联系，可以构建序列 b</summary>
      
    
    
    
    
    <category term="字符串" scheme="http://example.com/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="树状数组" scheme="http://example.com/tags/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
    
    <category term="排序" scheme="http://example.com/tags/%E6%8E%92%E5%BA%8F/"/>
    
    <category term="贪心" scheme="http://example.com/tags/%E8%B4%AA%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>Welcome to clamee&#39;s new blog!</title>
    <link href="http://example.com/1926/08/17/Welcome-to-clamee-s-new-blog/"/>
    <id>http://example.com/1926/08/17/Welcome-to-clamee-s-new-blog/</id>
    <published>1926-08-17T03:45:14.000Z</published>
    <updated>2020-10-08T03:30:20.917Z</updated>
    
    <content type="html"><![CDATA[<p>致 daisiki の米娜桑，</p><p>马上就要吃午饭了呢,在这个特殊的日子里。</p><p>能在这个美妙的时间搭建我的新博客，对于我而言是非常~开心的哦。以后如果大家想到我的博客来转转，我是非常~欢迎的呢。</p><p>大约两年前我在 luogu 开通了我的第一个博客，之后也会基本搬运过来。但这不意味着在 luogu 上停更，以后在 luogu 博客上我还是会发布一些题解。以后大部分的题解，以及所有的其他内容都会在这里发表。至于要不要同步当然是看皮(wo)卡(zi)丘(ji)的的心情啦，毕竟皮卡丘的意愿也是很重要的呢。</p><p>在搭建博客的过程中 T 神给了我极大的帮助，在这里非常感谢。顺便一提，T 神是个很可爱的妹子呢(<del>虽然说可爱的一直都只有男孩子而已呢</del>)。</p><p>今天感觉是个很重要的日子呢，感觉会有大事发生，会有什么有名的长者之类的人物诞生吗，我也不知道，但是相信屏幕前的你也是可以明白的吧。啊，要到饭点了呢，大家都赶紧去吃饭吧。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;致 daisiki の米娜桑，&lt;/p&gt;
&lt;p&gt;马上就要吃午饭了呢,在这个特殊的日子里。&lt;/p&gt;
&lt;p&gt;能在这个美妙的时间搭建我的新博客，对于我而言是非常~开心的哦。以后如果大家想到我的博客来转转，我是非常~欢迎的呢。&lt;/p&gt;
&lt;p&gt;大约两年前我在 luogu 开通了我的第一</summary>
      
    
    
    
    
    <category term="Other" scheme="http://example.com/tags/Other/"/>
    
  </entry>
  
</feed>
